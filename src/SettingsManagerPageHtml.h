/*
 * SettingsManagerPage.h
 *
 *  Created on: 02.07.2017
 *      Author: jane
 */

#ifndef SETTINGSMANAGERPAGE_H_
#define SETTINGSMANAGERPAGE_H_

#include <pgmspace.h>

namespace tankController {

    const static char SETTINGS_JS_LIB1_HTML_PAGE[] PROGMEM = "function setFldVal(name, val){document.getElementById(name).value=val;}\n"
            "function addFldVal(name){return \"&\"+name+\"=\"+document.getElementById(name).value;}\n"
            "function fillFields(obj){\n"
            "setFldVal(\"startWifi\",obj.startWifi);\n"
            "setFldVal(\"wifiPassword\",obj.wifiPassword);\n"
            "setFldVal(\"wifiSSID\",obj.wifiSSID);\n"
            "setFldVal(\"hostName\",obj.hostName);\n"
            "setFldVal(\"coefP\",obj.coefP);\n"
            "setFldVal(\"coefD\",obj.coefD);\n"
            "setFldVal(\"coefI\",obj.coefI);\n"
            "setFldVal(\"coefE\",obj.coefE);\n"
            "setFldVal(\"maxAbsISum\",obj.maxAbsISum);\n"
            "setFldVal(\"pidPeriodMs\",obj.pidPeriodMs);\n"
            "setFldVal(\"diffMin\",obj.diffMin);\n"
            "setFldVal(\"leftForwardPWMChannel\",obj.leftForwardPWMChannel);\n"
            "setFldVal(\"leftBackwardPWMChannel\",obj.leftBackwardPWMChannel);\n"
            "setFldVal(\"rightForwardPWMChannel\",obj.rightForwardPWMChannel);\n"
            "setFldVal(\"rightBackwardPWMChannel\",obj.rightBackwardPWMChannel);\n"
            "setFldVal(\"pwmFrequency\",obj.pwmFrequency);\n"
            "setFldVal(\"leftEncoderGpioPin\",obj.leftEncoderGpioPin);\n"
            "setFldVal(\"rightEncoderGpioPin\",obj.rightEncoderGpioPin);\n"
            "setFldVal(\"maxPower\",obj.maxPower);\n"
            "setFldVal(\"minPower\",obj.minPower);\n"
            "setFldVal(\"maxRotateSpeed\",obj.maxRotateSpeed);\n"
            "setFldVal(\"encoderCountsPerRotate\",obj.encoderCountsPerRotate);\n"
            "setFldVal(\"maxContinuousDriverCurrentMa\",obj.maxContinuousDriverCurrentMa);\n"
            "setFldVal(\"maxPeakDriverCurrentMa\",obj.maxPeakDriverCurrentMa);\n"
            "setFldVal(\"maxDriverTemperature\",obj.maxDriverTemperature);\n"
            "setFldVal(\"maxEngineTemperature\",obj.maxEngineTemperature);\n"
            "setFldVal(\"maxMBCurrentMa\",obj.maxMBCurrentMa);\n"
            "setFldVal(\"minEngineVoltageMv\",obj.minEngineVoltageMv);\n"
            "setFldVal(\"minTotalVoltageMv\",obj.minTotalVoltageMv);\n"
            "setFldVal(\"telemetryIntervalMs\",obj.telemetryIntervalMs);\n"
            "setFldVal(\"SMAPeakValues\",obj.SMAPeakValues);\n"
            "setFldVal(\"SMAAvgValues\",obj.SMAAvgValues);\n"
            "setFldVal(\"enginesEnabled\",obj.enginesEnabled);\n"
            "setFldVal(\"enginesLogBuffer\",obj.enginesLogBuffer);\n"
            "setFldVal(\"mainCurrentAnalogChannel\",obj.mainCurrentAnalogChannel);\n"
            "setFldVal(\"mainVoltageAnalogChannel\",obj.mainVoltageAnalogChannel);\n"
            "setFldVal(\"mbTemprAnalogChannel\",obj.mbTemprAnalogChannel);\n"
            "setFldVal(\"leftEngineCurrentAnalogChannel\",obj.leftEngineCurrentAnalogChannel);\n"
            "setFldVal(\"leftEngineVoltageAnalogChannel\",obj.leftEngineVoltageAnalogChannel);\n"
            "setFldVal(\"leftDriverTemprAnalogChannel\",obj.leftDriverTemprAnalogChannel);\n"
            "setFldVal(\"leftEngineTemprAnalogChannel\",obj.leftEngineTemprAnalogChannel);\n"
            "setFldVal(\"rightEngineCurrentAnalogChannel\",obj.rightEngineCurrentAnalogChannel);\n"
            "setFldVal(\"rightEngineVoltageAnalogChannel\",obj.rightEngineVoltageAnalogChannel);\n"
            "setFldVal(\"rightDriverTemprAnalogChannel\",obj.rightDriverTemprAnalogChannel);\n"
            "setFldVal(\"rightEngineTemprAnalogChannel\",obj.rightEngineTemprAnalogChannel);}\n";


    const static char SETTINGS_JS_LIB2_HTML_PAGE[] PROGMEM = "function settingsLoaded(response) {\n"
            "var obj = JSON.parse(response);\n"
            "if (obj != undefined) {\n"
            "fillFields(obj);}}\n"
            "function saveSettings(){\n"
            "var data = \"action=save\"+addFldVal(\"startWifi\")+addFldVal(\"wifiPassword\")+addFldVal(\"wifiSSID\")+\n"
            "addFldVal(\"hostName\")+ addFldVal(\"coefP\") + addFldVal(\"coefD\") + addFldVal(\"coefI\") + addFldVal(\"coefE\") +\n"
            "addFldVal(\"maxAbsISum\") + addFldVal(\"pidPeriodMs\") +addFldVal(\"diffMin\") +addFldVal(\"leftForwardPWMChannel\") +\n"
            "addFldVal(\"leftBackwardPWMChannel\") +addFldVal(\"rightForwardPWMChannel\") +addFldVal(\"rightBackwardPWMChannel\") +\n"
            "addFldVal(\"pwmFrequency\") +addFldVal(\"leftEncoderGpioPin\") +addFldVal(\"rightEncoderGpioPin\") +\n"
            "addFldVal(\"maxPower\") +addFldVal(\"minPower\") +addFldVal(\"maxRotateSpeed\") +addFldVal(\"encoderCountsPerRotate\") +\n"
            "addFldVal(\"maxContinuousDriverCurrentMa\") +addFldVal(\"maxPeakDriverCurrentMa\") +addFldVal(\"maxDriverTemperature\") +\n"
            "addFldVal(\"maxEngineTemperature\") +addFldVal(\"maxMBCurrentMa\") +addFldVal(\"minEngineVoltageMv\") +addFldVal(\"enginesLogBuffer\")+\n"
            "addFldVal(\"minTotalVoltageMv\") +addFldVal(\"telemetryIntervalMs\") +addFldVal(\"SMAPeakValues\") +addFldVal(\"SMAAvgValues\") +\n"
            "addFldVal(\"enginesEnabled\") +addFldVal(\"mainCurrentAnalogChannel\") +addFldVal(\"mainVoltageAnalogChannel\") +\n"
            "addFldVal(\"mbTemprAnalogChannel\") +addFldVal(\"leftEngineCurrentAnalogChannel\") +addFldVal(\"leftEngineVoltageAnalogChannel\") +\n"
            "addFldVal(\"leftDriverTemprAnalogChannel\") +addFldVal(\"leftEngineTemprAnalogChannel\") +addFldVal(\"rightEngineCurrentAnalogChannel\") +\n"
            "addFldVal(\"rightEngineVoltageAnalogChannel\") +addFldVal(\"rightDriverTemprAnalogChannel\") +addFldVal(\"rightEngineTemprAnalogChannel\");\n"
            "sendAsyncPOSTRequest(\"data/settings\", data, settingsSaved);}\n"
            "function loadSettings(){sendAsyncPOSTRequest(\"data/settings\",\"\",settingsLoaded);}\n"
            "function settingsSaved(response){var obj=JSON.parse(response);if (obj!=undefined) {if (obj.answerCode===0){\n"
            "alert(\"Saved SUCCEED !\"+\"\\r\\n\"+obj.answerMsg);loadSettings();} else {alert(\"Save error: \"+obj.answerMsg);}\n"
            "} else {alert(\"Unknown answer: \"+response);}}\n";


    const static char SETTINGS_JS_LIB3_HTML_PAGE[] PROGMEM = "var table;\n"
            "function addInput(name){\n"
            "var tr = document.createElement('tr');\n"
            "var td1 = document.createElement('td');\n"
            "td1.innerText = name;\n"
            "tr.appendChild(td1);\n"
            "var input = document.createElement('input');\n"
            "input.type='text';\n"
            "input.id = name;\n"
            "var td2 = document.createElement('td');\n"
            "td2.appendChild(input);\n"
            "tr.appendChild(td2);\n"
            "table.appendChild(tr);}\n"
            "function addSeparator(){\n"
            "var tr = document.createElement('tr');\n"
            "var td1 = document.createElement('td');\n"
            "td1.innerText = '--';\n"
            "tr.appendChild(td1);\n"
            "var td2 = document.createElement('td');\n"
            "td2.innerText = '--';\n"
            "tr.appendChild(td2);\n"
            "table.appendChild(tr);}\n"
            "function prepareSettingsTable(){\n"
            "table = document.getElementById('mainTable');\n"
            "addInput('startWifi');\n"
            "addInput('wifiPassword');\n"
            "addInput('wifiSSID');\n"
            "addInput('hostName');\n"
            "addSeparator();\n"
            "addInput('coefP');\n"
            "addInput('coefD');\n"
            "addInput('coefI');\n"
            "addInput('coefE');\n"
            "addInput('maxAbsISum');\n"
            "addInput('pidPeriodMs');\n"
            "addInput('diffMin');\n"
            "addSeparator();\n"
            "addInput('leftForwardPWMChannel');\n"
            "addInput('leftBackwardPWMChannel');\n"
            "addInput('rightForwardPWMChannel');\n"
            "addInput('rightBackwardPWMChannel');\n"
            "addInput('leftEncoderGpioPin');\n"
            "addInput('rightEncoderGpioPin');\n"
            "addSeparator();\n"
            "addInput('maxPower');\n"
            "addInput('minPower');\n"
            "addInput('maxRotateSpeed');\n"
            "addInput('encoderCountsPerRotate');\n"
            "addInput('pwmFrequency');\n"
            "addSeparator();\n"
            "addInput('telemetryIntervalMs');\n"
            "addInput('enginesLogBuffer');\n"
            "addSeparator();\n"
            "addInput('maxContinuousDriverCurrentMa');\n"
            "addInput('maxPeakDriverCurrentMa');\n"
            "addInput('maxDriverTemperature');\n"
            "addInput('maxEngineTemperature');\n"
            "addInput('maxMBCurrentMa');\n"
            "addInput('minEngineVoltageMv');\n"
            "addInput('minTotalVoltageMv');\n"
            "addInput('SMAPeakValues');\n"
            "addInput('SMAAvgValues');\n"
            "addSeparator();\n"
            "addInput('enginesEnabled');\n"
            "addSeparator();\n"
            "addInput('mainCurrentAnalogChannel');\n"
            "addInput('mainVoltageAnalogChannel');\n"
            "addInput('mbTemprAnalogChannel');\n"
            "addInput('leftEngineCurrentAnalogChannel');\n"
            "addInput('leftEngineVoltageAnalogChannel');\n"
            "addInput('leftDriverTemprAnalogChannel');\n"
            "addInput('leftEngineTemprAnalogChannel');\n"
            "addInput('rightEngineCurrentAnalogChannel');\n"
            "addInput('rightEngineVoltageAnalogChannel');\n"
            "addInput('rightDriverTemprAnalogChannel');\n"
            "addInput('rightEngineTemprAnalogChannel');\n"
            "addSeparator();}";

    const static char SETTINGS_HTML_PAGE[] PROGMEM = "<!DOCTYPE html>\n"
            "<html lang=\"en\">\n"
            "<head>\n"
//            "<script src='/js/common.js'></script>\n"
//            "<script src='/js/settings1.js'></script>\n"
//            "<script src='/js/settings2.js'></script>\n"
//            "<script src='/js/settings3.js'></script>\n"
            "<script language=\"JavaScript\">\n"
            "var counter = 0;\n"
            "var scriptNames=new Array('settings1.js','settings2.js','settings3.js','common.js','');\n"
            "var scriptNameIndex=-1;\n"
            "function loadScript(){\n"
            "var script = document.createElement('script');\n"
            "script.onerror = function(err){scriptNameIndex--;onScriptLoad();}\n"
            "script.onload=function(){onScriptLoad();};\n"
            "script.src = location.protocol + '//' + location.hostname +  '/js/' + scriptNames[scriptNameIndex];\n"
            "document.head.appendChild(script);}\n"
            "function onScriptLoad(){scriptNameIndex++;if(scriptNames[scriptNameIndex]!=''){loadScript()}else{onAllScriptLoaded();}}\n"
            "function onReady(){onScriptLoad();}\n"
            "function onAllScriptLoaded(){\n"
            "prepareSettingsTable();\n"
            "loadSettings();}\n"
            "</script>\n"
            "<meta charset=\"UTF-8\">\n"
            "<title>Settings</title>\n"
            "</head>\n"
            "<body onload=\"onReady();\">\n"
            "<table id=\"mainTable\">\n"
            "<tr><td style='width: 200px'></td><td style='width: 200px'></td></tr>\n"
            "</table>\n"
            "<table>\n"
            "<tr><td style='width:200px'><button onclick=\"saveSettings();\">Save</button></td><td style='width:200px'><button onclick=\"loadSettings();\">Reset</button></td></tr>\n"
            "</table></body></html>";


}


#endif /* SETTINGSMANAGERPAGE_H_ */
