/*
 * EngineInfo.h
 *
 *  Created on: 03.07.2017
 *      Author: jane
 */

#ifndef ENGINEINFO_H_
#define ENGINEINFO_H_

namespace tankController{

/**
 *  Структура для хранения данных двигателя
**/
struct EngineControlData {
  int requiredEncoderFrequency; // Требуемая частота энкодера
  int engineDirection; // Направление вращения двигателя
  int currentEncoderFrequency;  // текущая частота энкодера
  int currentPower;  // текущее абсолютное значение мощности, подаваемой на двигатель
  int volatile encoderCounter;  // выполнено отсчетов энкодером
  unsigned char engineName;  // Односимвольное имя двигателя
  unsigned char isEngineEncoderPresent;  // Признак, что у двигателя обнаружен работающий энкодер
  double currentPwrCorrection; // текущий поправочный коэффициент для мощности. То есть на сколько БЫЛА увеличена мощность
  //                              для достищения заданной скорости по отношению к табличной мощности для данной скорости.
  //                              Этот коэффициент пересчитывается N раз в секунду на основании данных энкодеров. Если
  //                              энкодеров нет, то он всегда 1. Необходим этот коэффициент для момента установки нового
  //                              значения скорости, чтобы сразу подвести правильную мощность к двигателю.
  unsigned char lowPower;  // Признак, что для достижения заданных оборотов у двигателя нет мощности. Это флаг мспользуется для
  //                          информирования о причине временно снижения максимально допустимой мощности, а с тем и мощности,
  //                          подаваемой на другой двигатель для сохранения заданного курса
  unsigned char encoderFails; // признак, что данные с энкодера не верны. Выставляется, если энкодер показывает данные при
  //                             остановленном двигателе или при корректирующем коэффициенте менее 0.5
  double integralSummator; // сумматор для интегральной составляющей ПИД
  int previousRotateError;  // значение ошибки при предыдущем цикле стабилизации. Для Д составляющей
  unsigned char smoothEncoderValue; // степень сглаживания скорости энкодера средней скользящей. Тут задается процент
  //                                ранее рассчитанной компоненты. Таким образом 0 - выключено
  char forwardPWMChannel;
  char backwardPWMChannel;

  int pCorr;
  int dCorr;
  int iCorr;

};


}


#endif /* ENGINEINFO_H_ */
